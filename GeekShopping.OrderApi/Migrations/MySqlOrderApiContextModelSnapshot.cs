// <auto-generated />
using System;
using GeekShopping.OrderApi.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeekShopping.OrderApi.Migrations
{
    [DbContext(typeof(MySqlOrderApiContext))]
    partial class MySqlOrderApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GeekShopping.OrderApi.Model.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    b.Property<int?>("count")
                        .HasColumnType("int")
                        .HasColumnName("count");

                    b.Property<long?>("orderHeaderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<long?>("productId")
                        .HasColumnType("bigint")
                        .HasColumnName("produtcId");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("orderHeaderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("GeekShopping.OrderApi.Model.OrderHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    b.Property<string>("CVV")
                        .HasColumnType("longtext");

                    b.Property<string>("CardNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("CouponCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("ExpiryMonthYear")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OrderDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OrderTotalItens")
                        .HasColumnType("int");

                    b.Property<bool?>("PaymentStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("PurchaseAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OrderHeader");
                });

            modelBuilder.Entity("GeekShopping.OrderApi.Model.OrderDetail", b =>
                {
                    b.HasOne("GeekShopping.OrderApi.Model.OrderHeader", "orderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("orderHeaderId");

                    b.Navigation("orderHeader");
                });

            modelBuilder.Entity("GeekShopping.OrderApi.Model.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
